#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../src/app');
var debug = require('debug')('demo:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var desiredPort = normalizePort(process.env.PORT || '3000');
var maxFallbacks = parseInt(process.env.PORT_FALLBACK_MAX || '50', 10);

// track the currently active server instance
var activeServer = null;

// Helper: try to listen on a numeric port, falling back to next ports when in use.
function tryListen(port, attemptsLeft) {
  // If port is not a number (named pipe), just try to listen once and let errors surface
  if (typeof port !== 'number') {
    var server = http.createServer(app.callback());
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    return;
  }

  var server = http.createServer(app.callback());

  server.on('listening', function() {
    // remember this server so listeners can inspect it
    activeServer = server;
    onListening();
  });

  server.on('error', function(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    if (error.code === 'EADDRINUSE' && attemptsLeft > 0) {
      console.error('Port ' + port + ' is already in use, trying port ' + (port + 1) + '...');
      // try next port
      tryListen(port + 1, attemptsLeft - 1);
      return;
    }

    // No fallback or other error -> handle normally
    onError(error, port);
  });

  server.listen(port);
}

// Start attempting to listen from desiredPort
tryListen(desiredPort, maxFallbacks);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind;
  if (typeof activeServer === 'string' || typeof activeServer === 'number') {
    bind = typeof activeServer === 'string' ? 'Pipe ' + activeServer : 'Port ' + activeServer;
  } else if (activeServer && activeServer.address) {
    var a = activeServer.address();
    bind = typeof a === 'string' ? 'Pipe ' + a : 'Port ' + a.port;
  } else {
    bind = 'Port ' + (process.env.PORT || 'unknown');
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = activeServer && activeServer.address && activeServer.address();
  var bind = addr
    ? (typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port)
    : ('port ' + (process.env.PORT || 'unknown'));
  console.log('Listening on ' + bind);
  debug('Listening on ' + bind);
}
